exports.ids=[1],exports.modules={113:function(e,t,n){"use strict";n.r(t);var r=n(1),a=n.n(r),o=n(8),s=n(13);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function(e){function t(e){var n,r,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=i(t).call(this,e),n=!a||"object"!==c(a)&&"function"!=typeof a?u(r):a,m(u(n),"componentWillMount",(function(){fetch("http://localhost:8000/api/allUser").then((function(e){return e.json()})).then((function(e){n.setState({listOfUser:e.listOfUser})})),fetch("http://localhost:8000/api/allChannel").then((function(e){return e.json()})).then((function(e){n.setState({listOfChannel:e.listOfChannel})}))})),m(u(n),"handleChannel",(function(e){n.props.openedChannelChatRoom(e.target.id)})),m(u(n),"handleUser",(function(e){n.props.setToUser({toUser:e.target.id,fromUser:n.props.currentUser._id})})),n.state={listOfUser:[],listOfChannel:[]},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this,t=this.state,n=t.listOfChannel,r=t.listOfUser,o=this.props.currentUser?this.props.currentUser.username:"";return a.a.createElement("aside",{className:"side-bar"},a.a.createElement("p",{className:"title-container"},a.a.createElement("span",{className:"user-name"},o),a.a.createElement("a",{href:"/logout",className:"right logout"},"logout")),a.a.createElement("div",null,a.a.createElement("input",{type:"text",className:"searchBox",placeholder:"Jump to ..."})),a.a.createElement("div",null,a.a.createElement("div",null,a.a.createElement("p",{className:"title-container"},a.a.createElement("span",{className:"title"},"Channels"),a.a.createElement("a",{title:"Create a channel",href:"/create",className:"right add-channel"},"+")),n.length&&n.map((function(t,n){return a.a.createElement("p",{key:n,className:e.props.toChannel==t._id?"selected channel-list":"channel-list",id:t._id,onClick:e.handleChannel},a.a.createElement("span",{className:"channel-logo"},"$")," ",t.name)})))),a.a.createElement("div",null,a.a.createElement("p",{className:"title-container"},a.a.createElement("span",{className:"title"},"Direct Messages")),r&&r.map((function(t,n){return t.username===o?a.a.createElement("p",{key:n,className:e.props.toUser==t._id?"selected username-list":"username-list",id:t._id,onClick:e.handleUser},a.a.createElement("span",{className:"online-user"}),t.username,"(you)"):a.a.createElement("p",{key:n,className:e.props.toUser==t._id?"selected username-list":"username-list",id:t._id,onClick:e.handleUser},a.a.createElement("span",{className:"offline-user"}),t.username)}))))}}])&&l(n.prototype,r),o&&l(n,o),t}(r.Component);var h=Object(o.b)((function(e){return{currentUser:e.currentUser,toUser:e.toUser,toChannel:e.toChannel}}),(function(e){return{dispatch:e,setToUser:function(t){return e(Object(s.f)(t))},openedChannelChatRoom:function(t){return e(Object(s.e)(t))}}}))(p),b=n(60),y=n.n(b);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var U=function(e){function t(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=E(this,v(t).call(this,e))).state={message:"",messages:[],listOfUser:[]},n.socket=y()("localhost:8000"),n.socket.emit("ONLINE",{userId:n.props.currentUser._id}),n.socket.on("RECEIVE_CHANNEL_MESSAGE",(function(e){r(e)}));var r=function(e){n.props.addMessages(n.props.toChannel)};return n.handleChange=function(e){var t,r,a;n.setState((t={},r=e.target.name,a=e.target.value,r in t?Object.defineProperty(t,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[r]=a,t))},n.handleSendMessage=function(e){e.preventDefault(),n.socket.emit("SEND_CHANNEL_MESSAGE",{toChannel:n.props.toChannel,author:n.props.currentUser.username,message:n.state.message}),n.setState({message:""})},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.currentChannel,n=e.currentUser;return a.a.createElement("div",{className:"chatArea"},a.a.createElement("div",{className:"chatContainer"},a.a.createElement("h1",{className:"center name"},this.props.currentChannel.name),t.messages&&t.messages.map((function(e,t){return a.a.createElement("div",{className:"message-info-container",key:t},e.username===n.username?a.a.createElement("span",{className:"message-user-img"}):a.a.createElement("span",{className:"message-user-img msg-usr-background"}),a.a.createElement("div",{className:"message-info"},a.a.createElement("span",{className:"user-name"},e.username)," ",a.a.createElement("span",null,e.message)))}))),a.a.createElement("form",{onSubmit:this.handleSendMessage,className:"sendMsgForm"},a.a.createElement("input",{name:"message",className:"input message-box",value:this.state.message,onChange:this.handleChange,placeholder:"Message"})))}}])&&g(n.prototype,r),o&&g(n,o),t}(r.Component);var _=Object(o.b)((function(e){return{currentUser:e.currentUser,currentChannel:e.selectedChannelInfo,toChannel:e.toChannel}}),(function(e){return{addMessages:function(t){return e(Object(s.a)(t))}}}))(U);function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var P=function(e){function t(e){var n,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=S(t).call(this,e),n=!a||"object"!==C(a)&&"function"!=typeof a?j(r):a,k(j(n),"componentWillMount",(function(){fetch("http://localhost:8000/api/allUser").then((function(e){return e.json()})).then((function(e){n.setState({listOfUser:e.listOfUser})}))})),n.state=k({message:"",listOfUser:[],messages:[]},"listOfUser",[]),n.socket=y()("localhost:8000"),n.socket.emit("ONLINE",{userId:n.props.currentUser._id}),n.socket.on("RECEIVE_PRIVATE_MESSAGE",(function(e){console.log(e,"received msg"),o(e)}));var o=function(e){var t={toUser:n.props.toUser,fromUser:n.props.currentUser._id,messages:e};n.props.addMessage(t)};return n.handleChange=function(e){n.setState(k({},e.target.name,e.target.value))},n.handleSendMessage=function(e){e.preventDefault();var t=n.state.message,r=n.props,a=r.currentUser,o=r.toUser;n.socket.emit("SEND_PRIVATE_MESSAGE",{toUser:o,fromUser:a._id,message:t}),n.setState({message:""})},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.currentUser,n=e.toUser,r=e.messages;return a.a.createElement("div",{className:"chatArea"},a.a.createElement("div",null,this.state.listOfUser.map((function(e,t){if(e._id===n)return a.a.createElement("h1",{key:t,className:"center name"},e.name)})),r.map((function(e,n){return e.fromUser===t._id?a.a.createElement("div",{key:n,className:"currentUser-msg-wrap"},a.a.createElement("span",{className:"right currentUser-msg"},e.message," ")):a.a.createElement("div",{key:n,className:"anotherUser-msg-wrap"},a.a.createElement("span",{className:"anotherUser-msg"},e.message," "))}))),a.a.createElement("form",{onSubmit:this.handleSendMessage,className:"sendMsgForm"},a.a.createElement("input",{name:"message",className:"input message-box",value:this.state.message,onChange:this.handleChange,placeholder:"Message"})))}}])&&N(n.prototype,r),o&&N(n,o),t}(r.Component);var M=Object(o.b)((function(e){return{currentUser:e.currentUser,toUser:e.toUser,messages:e.selectedUserMessages}}),(function(e){return{addMessage:function(t){return e(Object(s.b)(t))}}}))(P);function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t){return!t||"object"!==T(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var G=function(e){function t(){return A(this,t),x(this,I(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.toUser,n=e.toChannel;return a.a.createElement("div",{className:"dashboard"},a.a.createElement(h,null),t?a.a.createElement(M,null):n?a.a.createElement(_,null):a.a.createElement("div",{className:"news-feed"},a.a.createElement("p",{className:"news-feed-content center"},"The NewsFeed area still in the making process, so please select any friends or channel Chat-Room-Area.")))}}])&&R(n.prototype,r),o&&R(n,o),t}(r.Component);t.default=Object(o.b)((function(e){return{toUser:e.toUser,toChannel:e.toChannel}}))(G)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,