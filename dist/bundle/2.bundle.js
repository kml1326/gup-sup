exports.ids=[2],exports.modules={109:function(e,t,n){"use strict";var r=n(1),a=n.n(r),o=n(0),c=n.n(o),i=n(3),l=n.n(i),s=n(5),u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},h=function(e){function t(){var n,r;p(this,t);for(var a=arguments.length,o=Array(a),c=0;c<a;c++)o[c]=arguments[c];return n=r=f(this,e.call.apply(e,[this].concat(o))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!m(e)){e.preventDefault();var t=r.context.router.history,n=r.props,a=n.replace,o=n.to;a?t.replace(o):t.push(o)}},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);l()(this.context.router,"You should not use <Link> outside a <Router>"),l()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,c="string"==typeof t?Object(s.b)(t,null,null,o.location):t,i=o.createHref(c);return a.a.createElement("a",u({},r,{onClick:this.handleClick,href:i,ref:n}))},t}(a.a.Component);h.propTypes={onClick:c.a.func,target:c.a.string,replace:c.a.bool,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired,innerRef:c.a.oneOfType([c.a.string,c.a.func])},h.defaultProps={replace:!1},h.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired,createHref:c.a.func.isRequired}).isRequired}).isRequired},t.a=h},110:function(e,t,n){"use strict";n.r(t);var r=n(1),a=n.n(r),o=n(13),c=n(8),i=n(109);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(e){function t(){var e,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=u(t).call(this),e=!r||"object"!==l(r)&&"function"!=typeof r?p(n):r,m(p(e),"handleChange",(function(t){e.setState(m({},t.target.name,t.target.value))})),m(p(e),"handleLogin",(function(t){t.preventDefault(),e.props.login(e.state)})),e.state={username:"",password:""},e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return a.a.createElement("div",{className:"login-container"},a.a.createElement("div",{className:"col-1-2 login-logo"},a.a.createElement("div",{className:"clip-container"},a.a.createElement("div",{className:"clip"},a.a.createElement("p",{className:"gup"},"Gup"),a.a.createElement("p",{className:"sup right"},"Sup")))),a.a.createElement("div",{className:"col-1-2"},a.a.createElement("div",{className:"login-form"},a.a.createElement("div",{className:"login-form-inner"},a.a.createElement("h3",{className:"center logo-container"},a.a.createElement("span",{className:"logo"},"$")),a.a.createElement("form",{onSubmit:this.handleLogin},a.a.createElement("input",{name:"username",type:"text",className:"input",placeholder:"User Name",onChange:this.handleChange}),a.a.createElement("input",{name:"password",type:"password",className:"input",placeholder:"Password",onChange:this.handleChange}),a.a.createElement("p",{className:"center"},a.a.createElement("button",{className:"btn login-btn",onClick:this.handleLogin},"login")),a.a.createElement("p",null,a.a.createElement("i",{className:"fas fa-arrow-circle-right",fa:"10x"}))),a.a.createElement("p",{className:"form-msg center"},"New User ",a.a.createElement(i.a,{to:"/signup"},a.a.createElement("span",{className:"link-text"},"Sign Up"),"  "))))))}}])&&s(n.prototype,r),o&&s(n,o),t}(r.Component);t.default=Object(c.b)(null,(function(e){return{login:function(t){return e(Object(o.d)(t))}}}))(h)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,