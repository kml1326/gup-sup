exports.ids=[5],exports.modules=Array(46).concat([function(e,t,s){var n=s(94),r=s(69),o=s(96),i=s(97);t.protocol=3;var a=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},c=i(a),h={type:"error",data:"parser error"};const u=Buffer.concat([]);function p(e,s,n){if(!s)return t.encodeBase64Packet(e,n);var r=e.data,o=Buffer.allocUnsafe(1);return o[0]=a[e.type],n(Buffer.concat([o,r]))}function f(e,t,s){for(var n=new Array(e.length),r=o(e.length,s),i=0;i<e.length;i++)t(e[i],(function(e,t){n[i]=t,r(e,n)}))}function l(e){for(var t="",s=0,n=e.length;s<n;s++)t+=String.fromCharCode(e[s]);return t}function d(e){for(var t=Buffer.allocUnsafe(e.length),s=0,n=e.length;s<n;s++)t.writeUInt8(e.charCodeAt(s),s);return t}function y(e){var t=e.byteLength||e.length,s=e.byteOffset||0;return Buffer.from(e.buffer||e,s,t)}function m(e,s){t.encodePacket(e,!0,!0,(function(e){var t,n=""+e.length;if("string"==typeof e){(t=Buffer.allocUnsafe(n.length+2))[0]=0;for(var r=0;r<n.length;r++)t[r+1]=parseInt(n[r],10);return t[t.length-1]=255,s(null,Buffer.concat([t,d(e)]))}for((t=Buffer.allocUnsafe(n.length+2))[0]=1,r=0;r<n.length;r++)t[r+1]=parseInt(n[r],10);t[t.length-1]=255,s(null,Buffer.concat([t,e]))}))}t.encodePacket=function(e,t,s,r){if("function"==typeof t&&(r=t,t=null),"function"==typeof s&&(r=s,s=null),Buffer.isBuffer(e.data))return p(e,t,r);if(e.data&&(e.data.buffer||e.data)instanceof ArrayBuffer)return p({type:e.type,data:y(e.data)},t,r);var o=a[e.type];return void 0!==e.data&&(o+=s?n.encode(String(e.data),{strict:!1}):String(e.data)),r(""+o)},t.encodeBase64Packet=function(e,t){var s=Buffer.isBuffer(e.data)?e.data:y(e.data),n="b"+a[e.type];return t(n+=s.toString("base64"))},t.decodePacket=function(e,s,r){if(void 0===e)return h;var o;if("string"==typeof e)return"b"===(o=e.charAt(0))?t.decodeBase64Packet(e.substr(1),s):r&&!1===(e=function(e){try{e=n.decode(e,{strict:!1})}catch(e){return!1}return e}(e))?h:Number(o)==o&&c[o]?e.length>1?{type:c[o],data:e.substring(1)}:{type:c[o]}:h;if("arraybuffer"===s){var i=new Uint8Array(e);return o=i[0],{type:c[o],data:i.buffer.slice(1)}}return e instanceof ArrayBuffer&&(e=y(e)),o=e[0],{type:c[o],data:e.slice(1)}},t.decodeBase64Packet=function(e,t){var s=c[e.charAt(0)],n=Buffer.from(e.substr(1),"base64");if("arraybuffer"===t){for(var r=new Uint8Array(n.length),o=0;o<r.length;o++)r[o]=n[o];n=r.buffer}return{type:s,data:n}},t.encodePayload=function(e,s,n){if("function"==typeof s&&(n=s,s=null),s&&r(e))return t.encodePayloadAsBinary(e,n);if(!e.length)return n("0:");f(e,(function(e,n){t.encodePacket(e,s,!1,(function(e){n(null,function(e){return e.length+":"+e}(e))}))}),(function(e,t){return n(t.join(""))}))},t.decodePayload=function(e,s,n){if("string"!=typeof e)return t.decodePayloadAsBinary(e,s,n);if("function"==typeof s&&(n=s,s=null),""===e)return n(h,0,1);for(var r,o,i,a="",c=0,u=e.length;c<u;c++){var p=e.charAt(c);if(":"===p){if(""===a||a!=(r=Number(a)))return n(h,0,1);if(a!=(o=e.substr(c+1,r)).length)return n(h,0,1);if(o.length){if(i=t.decodePacket(o,s,!1),h.type===i.type&&h.data===i.data)return n(h,0,1);if(!1===n(i,c+r,u))return}c+=r,a=""}else a+=p}return""!==a?n(h,0,1):void 0},t.encodePayloadAsBinary=function(e,t){if(!e.length)return t(u);f(e,m,(function(e,s){return t(Buffer.concat(s))}))},t.decodePayloadAsBinary=function(e,s,n){"function"==typeof s&&(n=s,s=null);for(var r,o=e,i=[];o.length>0;){var a="",c=0===o[0];for(r=1;255!==o[r];r++){if(a.length>310)return n(h,0,1);a+=""+o[r]}o=o.slice(a.length+1);var u=parseInt(a,10),p=o.slice(1,u+1);c&&(p=l(p)),i.push(p),o=o.slice(u+1)}var f=i.length;for(r=0;r<f;r++){var d=i[r];n(t.decodePacket(d,s,!0),r,f)}}},function(e,t,s){"use strict";e.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),EMPTY_BUFFER:Buffer.alloc(0),NOOP:()=>{}}},function(e,t,s){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=s(82):e.exports=s(84)},function(e,t){t.encode=function(e){var t="";for(var s in e)e.hasOwnProperty(s)&&(t.length&&(t+="&"),t+=encodeURIComponent(s)+"="+encodeURIComponent(e[s]));return t},t.decode=function(e){for(var t={},s=e.split("&"),n=0,r=s.length;n<r;n++){var o=s[n].split("=");t[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return t}},function(e,t){e.exports=function(e,t){var s=function(){};s.prototype=t.prototype,e.prototype=new s,e.prototype.constructor=e}},function(e,t,s){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=s(98):e.exports=s(100)},function(e,t,s){"use strict";const n=s(104),r=s(43),o=s(59),{kStatusCode:i,NOOP:a}=s(47),c=Buffer.from([0,0,255,255]),h=Buffer.from([0]),u=Symbol("permessage-deflate"),p=Symbol("total-length"),f=Symbol("callback"),l=Symbol("buffers"),d=Symbol("error");let y;function m(e){this[l].push(e),this[p]+=e.length}function g(e){this[p]+=e.length,this[u]._maxPayload<1||this[p]<=this[u]._maxPayload?this[l].push(e):(this[d]=new RangeError("Max payload size exceeded"),this[d][i]=1009,this.removeListener("data",g),this.reset())}function v(e){this[u]._inflate=null,e[i]=1007,this[f](e)}e.exports=class{constructor(e,t,s){if(this._maxPayload=0|s,this._options=e||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!t,this._deflate=null,this._inflate=null,this.params=null,!y){const e=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;y=new n({concurrency:e})}}static get extensionName(){return"permessage-deflate"}offer(){const e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){this._inflate&&(this._inflate.close(),this._inflate=null),this._deflate&&(this._deflate.close(),this._deflate=null)}acceptAsServer(e){const t=this._options,s=e.find(e=>!(!1===t.serverNoContextTakeover&&e.server_no_context_takeover||e.server_max_window_bits&&(!1===t.serverMaxWindowBits||"number"==typeof t.serverMaxWindowBits&&t.serverMaxWindowBits>e.server_max_window_bits)||"number"==typeof t.clientMaxWindowBits&&!e.client_max_window_bits));if(!s)throw new Error("None of the extension offers can be accepted");return t.serverNoContextTakeover&&(s.server_no_context_takeover=!0),t.clientNoContextTakeover&&(s.client_no_context_takeover=!0),"number"==typeof t.serverMaxWindowBits&&(s.server_max_window_bits=t.serverMaxWindowBits),"number"==typeof t.clientMaxWindowBits?s.client_max_window_bits=t.clientMaxWindowBits:!0!==s.client_max_window_bits&&!1!==t.clientMaxWindowBits||delete s.client_max_window_bits,s}acceptAsClient(e){const t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(t.client_max_window_bits){if(!1===this._options.clientMaxWindowBits||"number"==typeof this._options.clientMaxWindowBits&&t.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"')}else"number"==typeof this._options.clientMaxWindowBits&&(t.client_max_window_bits=this._options.clientMaxWindowBits);return t}normalizeParams(e){return e.forEach(e=>{Object.keys(e).forEach(t=>{var s=e[t];if(s.length>1)throw new Error(`Parameter "${t}" must have only a single value`);if(s=s[0],"client_max_window_bits"===t){if(!0!==s){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}else if("server_max_window_bits"===t){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else{if("client_no_context_takeover"!==t&&"server_no_context_takeover"!==t)throw new Error(`Unknown parameter "${t}"`);if(!0!==s)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}e[t]=s})}),e}decompress(e,t,s){y.push(n=>{this._decompress(e,t,(e,t)=>{n(),s(e,t)})})}compress(e,t,s){y.push(n=>{this._compress(e,t,(e,t)=>{n(),s(e,t)})})}_decompress(e,t,s){const n=this._isServer?"client":"server";if(!this._inflate){const e=`${n}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._inflate=r.createInflateRaw(Object.assign({},this._options.zlibInflateOptions,{windowBits:t})),this._inflate[u]=this,this._inflate[p]=0,this._inflate[l]=[],this._inflate.on("error",v),this._inflate.on("data",g)}this._inflate[f]=s,this._inflate.write(e),t&&this._inflate.write(c),this._inflate.flush(()=>{const e=this._inflate[d];if(e)return this._inflate.close(),this._inflate=null,void s(e);const r=o.concat(this._inflate[l],this._inflate[p]);t&&this.params[`${n}_no_context_takeover`]?(this._inflate.close(),this._inflate=null):(this._inflate[p]=0,this._inflate[l]=[]),s(null,r)})}_compress(e,t,s){if(!e||0===e.length)return void process.nextTick(s,null,h);const n=this._isServer?"server":"client";if(!this._deflate){const e=`${n}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._deflate=r.createDeflateRaw(Object.assign({},this._options.zlibDeflateOptions,{windowBits:t})),this._deflate[p]=0,this._deflate[l]=[],this._deflate.on("error",a),this._deflate.on("data",m)}this._deflate.write(e),this._deflate.flush(r.Z_SYNC_FLUSH,()=>{if(this._deflate){var e=o.concat(this._deflate[l],this._deflate[p]);t&&(e=e.slice(0,e.length-4)),t&&this.params[`${n}_no_context_takeover`]?(this._deflate.close(),this._deflate=null):(this._deflate[p]=0,this._deflate[l]=[]),s(null,e)}})}}},function(e,t,s){"use strict";const n=s(38),r=s(85),o=Object({NODE_ENV:"production"});let i;function a(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(!1===i)return 0;if(r("color=16m")||r("color=full")||r("color=truecolor"))return 3;if(r("color=256"))return 2;if(e&&!e.isTTY&&!0!==i)return 0;const t=i?1:0;if("win32"===process.platform){const e=n.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in o)||"codeship"===o.CI_NAME?1:t;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("truecolor"===o.COLORTERM)return 3;if("TERM_PROGRAM"in o){const e=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)?1:"COLORTERM"in o?1:(o.TERM,t)}(e))}r("no-color")||r("no-colors")||r("color=false")?i=!1:(r("color")||r("colors")||r("color=true")||r("color=always"))&&(i=!0),"FORCE_COLOR"in o&&(i=0===o.FORCE_COLOR.length||0!==parseInt(o.FORCE_COLOR,10)),e.exports={supportsColor:a,stdout:a(process.stdout),stderr:a(process.stderr)}},function(e,t,s){var n=s(86)("socket.io-parser"),r=s(55),o=s(90),i=s(64),a=s(65);function c(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=c,t.Decoder=p;var h=t.ERROR+'"encode error"';function u(e){var s=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(s+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(s+=e.nsp+","),null!=e.id&&(s+=e.id),null!=e.data){var r=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===r)return h;s+=r}return n("encoded %j as %s",e,s),s}function p(){this.reconstructor=null}function f(e){this.reconPack=e,this.buffers=[]}function l(e){return{type:t.ERROR,data:"parser error: "+e}}c.prototype.encode=function(e,s){(n("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){o.removeBlobs(e,(function(e){var s=o.deconstructPacket(e),n=u(s.packet),r=s.buffers;r.unshift(n),t(r)}))}(e,s):s([u(e)])},r(p.prototype),p.prototype.add=function(e){var s;if("string"==typeof e)s=function(e){var s=0,r={type:Number(e.charAt(0))};if(null==t.types[r.type])return l("unknown packet type "+r.type);if(t.BINARY_EVENT===r.type||t.BINARY_ACK===r.type){for(var o="";"-"!==e.charAt(++s)&&(o+=e.charAt(s),s!=e.length););if(o!=Number(o)||"-"!==e.charAt(s))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===e.charAt(s+1))for(r.nsp="";++s;){if(","===(c=e.charAt(s)))break;if(r.nsp+=c,s===e.length)break}else r.nsp="/";var a=e.charAt(s+1);if(""!==a&&Number(a)==a){for(r.id="";++s;){var c;if(null==(c=e.charAt(s))||Number(c)!=c){--s;break}if(r.id+=e.charAt(s),s===e.length)break}r.id=Number(r.id)}if(e.charAt(++s)){var h=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(s));if(!(!1!==h&&(r.type===t.ERROR||i(h))))return l("invalid payload");r.data=h}return n("decoded %s as %j",e,r),r}(e),t.BINARY_EVENT===s.type||t.BINARY_ACK===s.type?(this.reconstructor=new f(s),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",s)):this.emit("decoded",s);else{if(!a(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(s=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",s))}},p.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},f.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},f.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,s){function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}e.exports=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function s(){this.off(e,s),t.apply(this,arguments)}return s.fn=t,this.on(e,s),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var r=0;r<n.length;r++)if((s=n[r])===t||s.fn===t){n.splice(r,1);break}return this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),s=this._callbacks["$"+e];if(s)for(var n=0,r=(s=s.slice(0)).length;n<r;++n)s[n].apply(this,t);return this},n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,s){
/**
 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
 *
 * This can be used with JS designed for browsers to improve reuse of code and
 * allow the use of existing libraries.
 *
 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
 *
 * @author Dan DeFelippi <dan@driverdan.com>
 * @contributor David Ellis <d.f.ellis@ieee.org>
 * @license MIT
 */
var n=s(39),r=s(35),o=s(40).spawn;function i(e){"use strict";e=e||{};var t,i,a=this,c=s(32),h=s(36),u={},p=!1,f={"User-Agent":"node-XMLHttpRequest",Accept:"*/*"},l=Object.assign({},f),d=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","content-transfer-encoding","cookie","cookie2","date","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"],y=["TRACE","TRACK","CONNECT"],m=!1,g=!1,v={};this.UNSENT=0,this.OPENED=1,this.HEADERS_RECEIVED=2,this.LOADING=3,this.DONE=4,this.readyState=this.UNSENT,this.onreadystatechange=null,this.responseText="",this.responseXML="",this.status=null,this.statusText=null;this.open=function(e,t,s,n,r){if(this.abort(),g=!1,!function(e){return e&&-1===y.indexOf(e)}(e))throw"SecurityError: Request method not allowed";u={method:e,url:t.toString(),async:"boolean"!=typeof s||s,user:n||null,password:r||null},b(this.OPENED)},this.setDisableHeaderCheck=function(e){p=e},this.setRequestHeader=function(e,t){if(this.readyState!=this.OPENED)throw"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN";if(!function(e){return p||e&&-1===d.indexOf(e.toLowerCase())}(e))return console.warn('Refused to set unsafe header "'+e+'"'),!1;if(m)throw"INVALID_STATE_ERR: send flag is true";return l[e]=t,!0},this.getResponseHeader=function(e){return"string"==typeof e&&this.readyState>this.OPENED&&i.headers[e.toLowerCase()]&&!g?i.headers[e.toLowerCase()]:null},this.getAllResponseHeaders=function(){if(this.readyState<this.HEADERS_RECEIVED||g)return"";var e="";for(var t in i.headers)"set-cookie"!==t&&"set-cookie2"!==t&&(e+=t+": "+i.headers[t]+"\r\n");return e.substr(0,e.length-2)},this.getRequestHeader=function(e){return"string"==typeof e&&l[e]?l[e]:""},this.send=function(s){if(this.readyState!=this.OPENED)throw"INVALID_STATE_ERR: connection must be opened before send() is called";if(m)throw"INVALID_STATE_ERR: send has already been called";var p,f=!1,d=!1,y=r.parse(u.url);switch(y.protocol){case"https:":f=!0;case"http:":p=y.hostname;break;case"file:":d=!0;break;case void 0:case"":p="localhost";break;default:throw"Protocol not supported."}if(d){if("GET"!==u.method)throw"XMLHttpRequest: Only GET method is supported";if(u.async)n.readFile(y.pathname,"utf8",(function(e,t){e?a.handleError(e):(a.status=200,a.responseText=t,b(a.DONE))}));else try{this.responseText=n.readFileSync(y.pathname,"utf8"),this.status=200,b(a.DONE)}catch(e){this.handleError(e)}}else{var v=y.port||(f?443:80),C=y.pathname+(y.search?y.search:"");if(l.Host=p,f&&443===v||80===v||(l.Host+=":"+y.port),u.user){void 0===u.password&&(u.password="");var _=new Buffer(u.user+":"+u.password);l.Authorization="Basic "+_.toString("base64")}"GET"===u.method||"HEAD"===u.method?s=null:s?(l["Content-Length"]=Buffer.isBuffer(s)?s.length:Buffer.byteLength(s),l["Content-Type"]||(l["Content-Type"]="text/plain;charset=UTF-8")):"POST"===u.method&&(l["Content-Length"]=0);var w=e.agent||!1,k={host:p,port:v,path:C,method:u.method,headers:l,agent:w};if(f&&(k.pfx=e.pfx,k.key=e.key,k.passphrase=e.passphrase,k.cert=e.cert,k.ca=e.ca,k.ciphers=e.ciphers,k.rejectUnauthorized=e.rejectUnauthorized),g=!1,u.async){var E=f?h.request:c.request;m=!0,a.dispatchEvent("readystatechange");var x=function(s){if(302===(i=s).statusCode||303===i.statusCode||307===i.statusCode){u.url=i.headers.location;var n=r.parse(u.url);p=n.hostname;var o={hostname:n.hostname,port:n.port,path:n.path,method:303===i.statusCode?"GET":u.method,headers:l};return f&&(o.pfx=e.pfx,o.key=e.key,o.passphrase=e.passphrase,o.cert=e.cert,o.ca=e.ca,o.ciphers=e.ciphers,o.rejectUnauthorized=e.rejectUnauthorized),void(t=E(o,x).on("error",S)).end()}i&&i.setEncoding&&i.setEncoding("utf8"),b(a.HEADERS_RECEIVED),a.status=i.statusCode,i.on("data",(function(e){e&&(a.responseText+=e),m&&b(a.LOADING)})),i.on("end",(function(){m&&(m=!1,b(a.DONE))})),i.on("error",(function(e){a.handleError(e)}))},S=function(e){a.handleError(e)};t=E(k,x).on("error",S),s&&t.write(s),t.end(),a.dispatchEvent("loadstart")}else{var O=".node-xmlhttprequest-content-"+process.pid,F=".node-xmlhttprequest-sync-"+process.pid;n.writeFileSync(F,"","utf8");for(var N="var http = require('http'), https = require('https'), fs = require('fs');var doRequest = http"+(f?"s":"")+".request;var options = "+JSON.stringify(k)+";var responseText = '';var req = doRequest(options, function(response) {response.setEncoding('utf8');response.on('data', function(chunk) {  responseText += chunk;});response.on('end', function() {fs.writeFileSync('"+O+"', 'NODE-XMLHTTPREQUEST-STATUS:' + response.statusCode + ',' + responseText, 'utf8');fs.unlinkSync('"+F+"');});response.on('error', function(error) {fs.writeFileSync('"+O+"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');fs.unlinkSync('"+F+"');});}).on('error', function(error) {fs.writeFileSync('"+O+"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');fs.unlinkSync('"+F+"');});"+(s?"req.write('"+s.replace(/'/g,"\\'")+"');":"")+"req.end();",T=o(process.argv[0],["-e",N]);n.existsSync(F););if(a.responseText=n.readFileSync(O,"utf8"),T.stdin.end(),n.unlinkSync(O),a.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)){var B=a.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/,"");a.handleError(B)}else a.status=a.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/,"$1"),a.responseText=a.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/,"$1"),b(a.DONE)}}},this.handleError=function(e){this.status=503,this.statusText=e,this.responseText=e.stack,g=!0,b(this.DONE)},this.abort=function(){t&&(t.abort(),t=null),l=Object.assign({},f),this.responseText="",this.responseXML="",g=!0,this.readyState===this.UNSENT||this.readyState===this.OPENED&&!m||this.readyState===this.DONE||(m=!1,b(this.DONE)),this.readyState=this.UNSENT},this.addEventListener=function(e,t){e in v||(v[e]=[]),v[e].push(t)},this.removeEventListener=function(e,t){e in v&&(v[e]=v[e].filter((function(e){return e!==t})))},this.dispatchEvent=function(e){if("function"==typeof a["on"+e]&&a["on"+e](),e in v)for(var t=0,s=v[e].length;t<s;t++)v[e][t].call(a)};var b=function(e){a.readyState!==e&&(a.readyState=e,(u.async||a.readyState<a.OPENED||a.readyState===a.DONE)&&a.dispatchEvent("readystatechange"),a.readyState!==a.DONE||g||(a.dispatchEvent("load"),a.dispatchEvent("loadend")))}}e.exports=i,i.XMLHttpRequest=i},function(e,t,s){var n=s(46),r=s(58);function o(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.isReactNative=e.isReactNative,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=o,r(o.prototype),o.prototype.onError=function(e,t){var s=new Error(e);return s.type="TransportError",s.description=t,this.emit("error",s),this},o.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},o.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},o.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},o.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},o.prototype.onData=function(e){var t=n.decodePacket(e,this.socket.binaryType);this.onPacket(t)},o.prototype.onPacket=function(e){this.emit("packet",e)},o.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,s){function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}e.exports=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function s(){this.off(e,s),t.apply(this,arguments)}return s.fn=t,this.on(e,s),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var r=0;r<n.length;r++)if((s=n[r])===t||s.fn===t){n.splice(r,1);break}return this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),s=this._callbacks["$"+e];if(s)for(var n=0,r=(s=s.slice(0)).length;n<r;++n)s[n].apply(this,t);return this},n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,s){"use strict";function n(e,t){const s=Buffer.allocUnsafe(t);for(var n=0,r=0;r<e.length;r++){const t=e[r];t.copy(s,n),n+=t.length}return s}function r(e,t,s,n,r){for(var o=0;o<r;o++)s[n+o]=e[o]^t[3&o]}function o(e,t){const s=e.length;for(var n=0;n<s;n++)e[n]^=t[3&n]}try{const t=s(!function(){var e=new Error("Cannot find module 'bufferutil'");throw e.code="MODULE_NOT_FOUND",e}()),i=t.BufferUtil||t;e.exports={mask(e,t,s,n,o){o<48?r(e,t,s,n,o):i.mask(e,t,s,n,o)},unmask(e,t){e.length<32?o(e,t):i.unmask(e,t)},concat:n}}catch(t){e.exports={concat:n,mask:r,unmask:o}}},function(e,t,s){var n=s(81),r=s(54),o=s(66),i=s(48)("socket.io-client");e.exports=t=c;var a=t.managers={};function c(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var s,r=n(e),c=r.source,h=r.id,u=r.path,p=a[h]&&u in a[h].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||p?(i("ignoring socket cache for %s",c),s=o(c,t)):(a[h]||(i("new io instance for %s",c),a[h]=o(c,t)),s=a[h]),r.query&&!t.query&&(t.query=r.query),s.socket(r.path,t)}t.protocol=r.protocol,t.connect=c,t.Manager=s(66),t.Socket=s(78)},function(e,t){var s=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,r=e.indexOf("["),o=e.indexOf("]");-1!=r&&-1!=o&&(e=e.substring(0,r)+e.substring(r,o).replace(/:/g,";")+e.substring(o,e.length));for(var i=s.exec(e||""),a={},c=14;c--;)a[n[c]]=i[c]||"";return-1!=r&&-1!=o&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(e,t,s){e.exports=function(e){function t(e){let t=0;for(let s=0;s<e.length;s++)t=(t<<5)-t+e.charCodeAt(s),t|=0;return n.colors[Math.abs(t)%n.colors.length]}function n(e){let s;function i(...e){if(!i.enabled)return;const t=i,r=Number(new Date),o=r-(s||r);t.diff=o,t.prev=s,t.curr=r,s=r,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(s,r)=>{if("%%"===s)return s;a++;const o=n.formatters[r];if("function"==typeof o){const n=e[a];s=o.call(t,n),e.splice(a,1),a--}return s}),n.formatArgs.call(t,e),(t.log||n.log).apply(t,e)}return i.namespace=e,i.enabled=n.enabled(e),i.useColors=n.useColors(),i.color=t(e),i.destroy=r,i.extend=o,"function"==typeof n.init&&n.init(i),n.instances.push(i),i}function r(){const e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}function o(e,t){const s=n(this.namespace+(void 0===t?":":t)+e);return s.log=this.log,s}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},n.disable=function(){const e=[...n.names.map(i),...n.skips.map(i).map(e=>"-"+e)].join(",");return n.enable(""),e},n.enable=function(e){let t;n.save(e),n.names=[],n.skips=[];const s=("string"==typeof e?e:"").split(/[\s,]+/),r=s.length;for(t=0;t<r;t++)s[t]&&("-"===(e=s[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){const e=n.instances[t];e.enabled=n.enabled(e.namespace)}},n.enabled=function(e){if("*"===e[e.length-1])return!0;let t,s;for(t=0,s=n.skips.length;t<s;t++)if(n.skips[t].test(e))return!1;for(t=0,s=n.names.length;t<s;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=s(83),Object.keys(e).forEach(t=>{n[t]=e[t]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=t,n.enable(n.load()),n}},function(e,t,s){function n(e){var s;function n(){if(n.enabled){var e=n,r=+new Date,o=r-(s||r);e.diff=o,e.prev=s,e.curr=r,s=r;for(var i=new Array(arguments.length),a=0;a<i.length;a++)i[a]=arguments[a];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var c=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,(function(s,n){if("%%"===s)return s;c++;var r=t.formatters[n];if("function"==typeof r){var o=i[c];s=r.call(e,o),i.splice(c,1),c--}return s})),t.formatArgs.call(e,i);var h=n.log||t.log||console.log.bind(console);h.apply(e,i)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=function(e){var s,n=0;for(s in e)n=(n<<5)-n+e.charCodeAt(s),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),n.destroy=r,"function"==typeof t.init&&t.init(n),t.instances.push(n),n}function r(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=n.debug=n.default=n).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var s;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),r=n.length;for(s=0;s<r;s++)n[s]&&("-"===(e=n[s].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(s=0;s<t.instances.length;s++){var o=t.instances[s];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var s,n;for(s=0,n=t.skips.length;s<n;s++)if(t.skips[s].test(e))return!1;for(s=0,n=t.names.length;s<n;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(88),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var s={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==s.call(e)}},function(e,t){e.exports=function(e){return s&&Buffer.isBuffer(e)||n&&(e instanceof ArrayBuffer||function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}(e))};var s="function"==typeof Buffer&&"function"==typeof Buffer.isBuffer,n="function"==typeof ArrayBuffer},function(e,t,s){var n=s(91),r=s(78),o=s(55),i=s(54),a=s(79),c=s(80),h=s(48)("socket.io-client:manager"),u=s(77),p=s(108),f=Object.prototype.hasOwnProperty;function l(e,t){if(!(this instanceof l))return new l(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new p({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var s=t.parser||i;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=l,l.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},l.prototype.updateSocketIds=function(){for(var e in this.nsps)f.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},l.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},o(l.prototype),l.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},l.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},l.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},l.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},l.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},l.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},l.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},l.prototype.open=l.prototype.connect=function(e,t){if(h("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;h("opening %s",this.uri),this.engine=n(this.uri,this.opts);var s=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var o=a(s,"open",(function(){r.onopen(),e&&e()})),i=a(s,"error",(function(t){if(h("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",t),e){var s=new Error("Connection error");s.data=t,e(s)}else r.maybeReconnectOnOpen()}));if(!1!==this._timeout){var c=this._timeout;h("connect attempt will timeout after %d",c);var u=setTimeout((function(){h("connect attempt timed out after %d",c),o.destroy(),s.close(),s.emit("error","timeout"),r.emitAll("connect_timeout",c)}),c);this.subs.push({destroy:function(){clearTimeout(u)}})}return this.subs.push(o),this.subs.push(i),this},l.prototype.onopen=function(){h("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(a(e,"data",c(this,"ondata"))),this.subs.push(a(e,"ping",c(this,"onping"))),this.subs.push(a(e,"pong",c(this,"onpong"))),this.subs.push(a(e,"error",c(this,"onerror"))),this.subs.push(a(e,"close",c(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",c(this,"ondecoded")))},l.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},l.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},l.prototype.ondata=function(e){this.decoder.add(e)},l.prototype.ondecoded=function(e){this.emit("packet",e)},l.prototype.onerror=function(e){h("error",e),this.emitAll("error",e)},l.prototype.socket=function(e,t){var s=this.nsps[e];if(!s){s=new r(this,e,t),this.nsps[e]=s;var n=this;s.on("connecting",o),s.on("connect",(function(){s.id=n.generateId(e)})),this.autoConnect&&o()}function o(){~u(n.connecting,s)||n.connecting.push(s)}return s},l.prototype.destroy=function(e){var t=u(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},l.prototype.packet=function(e){h("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,(function(s){for(var n=0;n<s.length;n++)t.engine.write(s[n],e.options);t.encoding=!1,t.processPacketQueue()})))},l.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},l.prototype.cleanup=function(){h("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},l.prototype.close=l.prototype.disconnect=function(){h("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},l.prototype.onclose=function(e){h("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},l.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)h("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();h("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var s=setTimeout((function(){e.skipReconnect||(h("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open((function(t){t?(h("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(h("reconnect success"),e.onreconnect())})))}),t);this.subs.push({destroy:function(){clearTimeout(s)}})}},l.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,s){var n=s(56),r=s(93),o=s(101),i=s(102);t.polling=function(e){var t=!1,s=!1,i=!1!==e.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,c=location.port;c||(c=a?443:80),t=e.hostname!==location.hostname||c!==e.port,s=e.secure!==a}if(e.xdomain=t,e.xscheme=s,"open"in new n(e)&&!e.forceJSONP)return new r(e);if(!i)throw new Error("JSONP disabled");return new o(e)},t.websocket=i},function(e,t,s){var n=s(57),r=s(49),o=s(46),i=s(50),a=s(70),c=s(51)("engine.io-client:polling");e.exports=u;var h=null!=new(s(56))({xdomain:!1}).responseType;function u(e){var t=e&&e.forceBase64;h&&!t||(this.supportsBinary=!1),n.call(this,e)}i(u,n),u.prototype.name="polling",u.prototype.doOpen=function(){this.poll()},u.prototype.pause=function(e){var t=this;function s(){c("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(c("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){c("pre-pause polling complete"),--n||s()}))),this.writable||(c("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){c("pre-pause writing complete"),--n||s()})))}else s()},u.prototype.poll=function(){c("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},u.prototype.onData=function(e){var t=this;c("polling got data %s",e);o.decodePayload(e,this.socket.binaryType,(function(e,s,n){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():c('ignoring poll - transport state "%s"',this.readyState))},u.prototype.doClose=function(){var e=this;function t(){c("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(c("transport open - closing"),t()):(c("transport not open - deferring close"),this.once("open",t))},u.prototype.write=function(e){var t=this;this.writable=!1;var s=function(){t.writable=!0,t.emit("drain")};o.encodePayload(e,this.supportsBinary,(function(e){t.doWrite(e,s)}))},u.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",s="";return!1!==this.timestampRequests&&(e[this.timestampParam]=a()),this.supportsBinary||e.sid||(e.b64=1),e=r.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(s=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+s+this.path+e}},function(e,t,s){var n=s(95),r=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);e.exports=function e(t){if(!t||"object"!=typeof t)return!1;if(n(t)){for(var s=0,r=t.length;s<r;s++)if(e(t[s]))return!0;return!1}if("function"==typeof Buffer&&Buffer.isBuffer&&Buffer.isBuffer(t)||"function"==typeof ArrayBuffer&&t instanceof ArrayBuffer||o&&t instanceof Blob||i&&t instanceof File)return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(var a in t)if(Object.prototype.hasOwnProperty.call(t,a)&&e(t[a]))return!0;return!1}},function(e,t,s){"use strict";var n,r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),o={},i=0,a=0;function c(e){var t="";do{t=r[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function h(){var e=c(+new Date);return e!==n?(i=0,n=e):e+"."+c(i++)}for(;a<64;a++)o[r[a]]=a;h.encode=c,h.decode=function(e){var t=0;for(a=0;a<e.length;a++)t=64*t+o[e.charAt(a)];return t},e.exports=h},function(e,t,s){e.exports=function(e){function t(e){let t=0;for(let s=0;s<e.length;s++)t=(t<<5)-t+e.charCodeAt(s),t|=0;return n.colors[Math.abs(t)%n.colors.length]}function n(e){let s;function i(...e){if(!i.enabled)return;const t=i,r=Number(new Date),o=r-(s||r);t.diff=o,t.prev=s,t.curr=r,s=r,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(s,r)=>{if("%%"===s)return s;a++;const o=n.formatters[r];if("function"==typeof o){const n=e[a];s=o.call(t,n),e.splice(a,1),a--}return s}),n.formatArgs.call(t,e),(t.log||n.log).apply(t,e)}return i.namespace=e,i.enabled=n.enabled(e),i.useColors=n.useColors(),i.color=t(e),i.destroy=r,i.extend=o,"function"==typeof n.init&&n.init(i),n.instances.push(i),i}function r(){const e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}function o(e,t){const s=n(this.namespace+(void 0===t?":":t)+e);return s.log=this.log,s}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},n.disable=function(){const e=[...n.names.map(i),...n.skips.map(i).map(e=>"-"+e)].join(",");return n.enable(""),e},n.enable=function(e){let t;n.save(e),n.names=[],n.skips=[];const s=("string"==typeof e?e:"").split(/[\s,]+/),r=s.length;for(t=0;t<r;t++)s[t]&&("-"===(e=s[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){const e=n.instances[t];e.enabled=n.enabled(e.namespace)}},n.enabled=function(e){if("*"===e[e.length-1])return!0;let t,s;for(t=0,s=n.skips.length;t<s;t++)if(n.skips[t].test(e))return!1;for(t=0,s=n.names.length;t<s;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=s(99),Object.keys(e).forEach(t=>{n[t]=e[t]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=t,n.enable(n.load()),n}},function(e,t,s){"use strict";const n=s(37),r=s(33),o=s(36),i=s(32),a=s(41),c=s(42),h=s(35),u=s(52),p=s(105),f=s(73),l=s(47),d=s(74),y=s(76),m=["CONNECTING","OPEN","CLOSING","CLOSED"],g=l.kWebSocket,v=[8,13];class b extends n{constructor(e,t,s){super(),this.readyState=b.CONNECTING,this.protocol="",this._binaryType=l.BINARY_TYPES[0],this._closeFrameReceived=!1,this._closeFrameSent=!1,this._closeMessage="",this._closeTimer=null,this._closeCode=1006,this._extensions={},this._isServer=!0,this._receiver=null,this._sender=null,this._socket=null,null!==e&&(Array.isArray(t)?t=t.join(", "):"object"==typeof t&&null!==t&&(s=t,t=void 0),C.call(this,e,t,s))}get CONNECTING(){return b.CONNECTING}get CLOSING(){return b.CLOSING}get CLOSED(){return b.CLOSED}get OPEN(){return b.OPEN}get binaryType(){return this._binaryType}set binaryType(e){l.BINARY_TYPES.includes(e)&&(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}get bufferedAmount(){return this._socket?(this._socket.bufferSize||0)+this._sender._bufferedBytes:0}get extensions(){return Object.keys(this._extensions).join()}setSocket(e,t,s){const n=new d(this._binaryType,this._extensions,s);this._sender=new y(e,this._extensions),this._receiver=n,this._socket=e,n[g]=this,e[g]=this,n.on("conclude",E),n.on("drain",x),n.on("error",S),n.on("message",F),n.on("ping",N),n.on("pong",T),e.setTimeout(0),e.setNoDelay(),t.length>0&&e.unshift(t),e.on("close",B),e.on("data",R),e.on("end",A),e.on("error",D),this.readyState=b.OPEN,this.emit("open")}emitClose(){this.readyState=b.CLOSED,this._socket?(this._extensions[u.extensionName]&&this._extensions[u.extensionName].cleanup(),this._receiver.removeAllListeners(),this.emit("close",this._closeCode,this._closeMessage)):this.emit("close",this._closeCode,this._closeMessage)}close(e,t){if(this.readyState!==b.CLOSED){if(this.readyState===b.CONNECTING){const e="WebSocket was closed before the connection was established";return k(this,this._req,e)}this.readyState!==b.CLOSING?(this.readyState=b.CLOSING,this._sender.close(e,t,!this._isServer,e=>{e||(this._closeFrameSent=!0,this._socket.writable&&(this._closeFrameReceived&&this._socket.end(),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),3e4)))})):this._closeFrameSent&&this._closeFrameReceived&&this._socket.end()}}ping(e,t,s){if("function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),this.readyState!==b.OPEN){const e=new Error(`WebSocket is not open: readyState ${this.readyState} `+`(${m[this.readyState]})`);if(s)return s(e);throw e}"number"==typeof e&&(e=e.toString()),void 0===t&&(t=!this._isServer),this._sender.ping(e||l.EMPTY_BUFFER,t,s)}pong(e,t,s){if("function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),this.readyState!==b.OPEN){const e=new Error(`WebSocket is not open: readyState ${this.readyState} `+`(${m[this.readyState]})`);if(s)return s(e);throw e}"number"==typeof e&&(e=e.toString()),void 0===t&&(t=!this._isServer),this._sender.pong(e||l.EMPTY_BUFFER,t,s)}send(e,t,s){if("function"==typeof t&&(s=t,t={}),this.readyState!==b.OPEN){const e=new Error(`WebSocket is not open: readyState ${this.readyState} `+`(${m[this.readyState]})`);if(s)return s(e);throw e}"number"==typeof e&&(e=e.toString());const n=Object.assign({binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0},t);this._extensions[u.extensionName]||(n.compress=!1),this._sender.send(e||l.EMPTY_BUFFER,n,s)}terminate(){if(this.readyState!==b.CLOSED){if(this.readyState===b.CONNECTING){const e="WebSocket was closed before the connection was established";return k(this,this._req,e)}this._socket&&(this.readyState=b.CLOSING,this._socket.destroy())}}}function C(e,t,s){if(s=Object.assign({protocolVersion:v[1],perMessageDeflate:!0,maxPayload:104857600},s,{createConnection:void 0,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:void 0,auth:void 0,host:void 0,path:void 0,port:void 0}),!v.includes(s.protocolVersion))throw new RangeError(`Unsupported protocol version: ${s.protocolVersion} `+`(supported versions: ${v.join(", ")})`);var n;this._isServer=!1,"object"==typeof e&&void 0!==e.href?(n=e,this.url=e.href):(n=h.URL?new h.URL(e):h.parse(e),this.url=e);const a="ws+unix:"===n.protocol;if(!(n.host||a&&n.pathname))throw new Error(`Invalid URL: ${this.url}`);const c="wss:"===n.protocol||"https:"===n.protocol,p=c?443:80,d=r.randomBytes(16).toString("base64"),y=c?o:i,m=n.search?`${n.pathname||"/"}${n.search}`:n.pathname||"/";var g;if(s.createConnection=c?w:_,s.defaultPort=s.defaultPort||p,s.port=n.port||p,s.host=n.hostname.startsWith("[")?n.hostname.slice(1,-1):n.hostname,s.headers=Object.assign({"Sec-WebSocket-Version":s.protocolVersion,"Sec-WebSocket-Key":d,Connection:"Upgrade",Upgrade:"websocket"},s.headers),s.path=m,s.timeout=s.handshakeTimeout,s.perMessageDeflate&&(g=new u(!0!==s.perMessageDeflate?s.perMessageDeflate:{},!1,s.maxPayload),s.headers["Sec-WebSocket-Extensions"]=f.format({[u.extensionName]:g.offer()})),t&&(s.headers["Sec-WebSocket-Protocol"]=t),s.origin&&(s.protocolVersion<13?s.headers["Sec-WebSocket-Origin"]=s.origin:s.headers.Origin=s.origin),n.auth?s.auth=n.auth:(n.username||n.password)&&(s.auth=`${n.username}:${n.password}`),a){const e=m.split(":");s.socketPath=e[0],s.path=e[1]}var C=this._req=y.get(s);s.handshakeTimeout&&C.on("timeout",()=>{k(this,C,"Opening handshake has timed out")}),C.on("error",e=>{this._req.aborted||(C=this._req=null,this.readyState=b.CLOSING,this.emit("error",e),this.emitClose())}),C.on("response",e=>{this.emit("unexpected-response",C,e)||k(this,C,`Unexpected server response: ${e.statusCode}`)}),C.on("upgrade",(e,n,o)=>{if(this.emit("upgrade",e),this.readyState!==b.CONNECTING)return;C=this._req=null;const i=r.createHash("sha1").update(d+l.GUID,"binary").digest("base64");if(e.headers["sec-websocket-accept"]!==i)return void k(this,n,"Invalid Sec-WebSocket-Accept header");const a=e.headers["sec-websocket-protocol"],c=(t||"").split(/, */);var h;if(!t&&a?h="Server sent a subprotocol but none was requested":t&&!a?h="Server sent no subprotocol":a&&!c.includes(a)&&(h="Server sent an invalid subprotocol"),h)k(this,n,h);else{if(a&&(this.protocol=a),g)try{const t=f.parse(e.headers["sec-websocket-extensions"]);t[u.extensionName]&&(g.accept(t[u.extensionName]),this._extensions[u.extensionName]=g)}catch(e){return void k(this,n,"Invalid Sec-WebSocket-Extensions header")}this.setSocket(n,o,s.maxPayload)}})}function _(e){return e.protocolVersion&&(e.path=e.socketPath),a.connect(e)}function w(e){return e.path=void 0,e.servername=e.servername||e.host,c.connect(e)}function k(e,t,s){e.readyState=b.CLOSING;const n=new Error(s);Error.captureStackTrace(n,k),t.setHeader?(t.abort(),t.once("abort",e.emitClose.bind(e)),e.emit("error",n)):(t.destroy(n),t.once("error",e.emit.bind(e,"error")),t.once("close",e.emitClose.bind(e)))}function E(e,t){const s=this[g];s._socket.removeListener("data",R),s._socket.resume(),s._closeFrameReceived=!0,s._closeMessage=t,s._closeCode=e,1005===e?s.close():s.close(e,t)}function x(){this[g]._socket.resume()}function S(e){const t=this[g];t._socket.removeListener("data",R),t.readyState=b.CLOSING,t._closeCode=e[l.kStatusCode],t.emit("error",e),t._socket.destroy()}function O(){this[g].emitClose()}function F(e){this[g].emit("message",e)}function N(e){const t=this[g];t.pong(e,!t._isServer,l.NOOP),t.emit("ping",e)}function T(e){this[g].emit("pong",e)}function B(){const e=this[g];this.removeListener("close",B),this.removeListener("end",A),e.readyState=b.CLOSING,e._socket.read(),e._receiver.end(),this.removeListener("data",R),this[g]=void 0,clearTimeout(e._closeTimer),e._receiver._writableState.finished||e._receiver._writableState.errorEmitted?e.emitClose():(e._receiver.on("error",O),e._receiver.on("finish",O))}function R(e){this[g]._receiver.write(e)||this.pause()}function A(){const e=this[g];e.readyState=b.CLOSING,e._receiver.end(),this.end()}function D(){const e=this[g];this.removeListener("error",D),this.on("error",l.NOOP),e&&(e.readyState=b.CLOSING,this.destroy())}m.forEach((e,t)=>{b[e]=t}),["open","error","close","message"].forEach(e=>{Object.defineProperty(b.prototype,`on${e}`,{get(){const t=this.listeners(e);for(var s=0;s<t.length;s++)if(t[s]._listener)return t[s]._listener},set(t){const s=this.listeners(e);for(var n=0;n<s.length;n++)s[n]._listener&&this.removeListener(e,s[n]);this.addEventListener(e,t)}})}),b.prototype.addEventListener=p.addEventListener,b.prototype.removeEventListener=p.removeEventListener,e.exports=b},function(e,t,s){"use strict";const n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0];function r(e,t,s){Object.prototype.hasOwnProperty.call(e,t)?e[t].push(s):e[t]=[s]}e.exports={format:function(e){return Object.keys(e).map(t=>{var s=e[t];return Array.isArray(s)||(s=[s]),s.map(e=>[t].concat(Object.keys(e).map(t=>{var s=e[t];return Array.isArray(s)||(s=[s]),s.map(e=>!0===e?t:`${t}=${e}`).join("; ")})).join("; ")).join(", ")}).join(", ")},parse:function(e){const t={};if(void 0===e||""===e)return t;for(var s,o,i={},a=!1,c=!1,h=!1,u=-1,p=-1,f=0;f<e.length;f++){const d=e.charCodeAt(f);if(void 0===s)if(-1===p&&1===n[d])-1===u&&(u=f);else if(32===d||9===d)-1===p&&-1!==u&&(p=f);else{if(59!==d&&44!==d)throw new SyntaxError(`Unexpected character at index ${f}`);{if(-1===u)throw new SyntaxError(`Unexpected character at index ${f}`);-1===p&&(p=f);const n=e.slice(u,p);44===d?(r(t,n,i),i={}):s=n,u=p=-1}}else if(void 0===o)if(-1===p&&1===n[d])-1===u&&(u=f);else if(32===d||9===d)-1===p&&-1!==u&&(p=f);else if(59===d||44===d){if(-1===u)throw new SyntaxError(`Unexpected character at index ${f}`);-1===p&&(p=f),r(i,e.slice(u,p),!0),44===d&&(r(t,s,i),i={},s=void 0),u=p=-1}else{if(61!==d||-1===u||-1!==p)throw new SyntaxError(`Unexpected character at index ${f}`);o=e.slice(u,f),u=p=-1}else if(c){if(1!==n[d])throw new SyntaxError(`Unexpected character at index ${f}`);-1===u?u=f:a||(a=!0),c=!1}else if(h)if(1===n[d])-1===u&&(u=f);else if(34===d&&-1!==u)h=!1,p=f;else{if(92!==d)throw new SyntaxError(`Unexpected character at index ${f}`);c=!0}else if(34===d&&61===e.charCodeAt(f-1))h=!0;else if(-1===p&&1===n[d])-1===u&&(u=f);else if(-1===u||32!==d&&9!==d){if(59!==d&&44!==d)throw new SyntaxError(`Unexpected character at index ${f}`);if(-1===u)throw new SyntaxError(`Unexpected character at index ${f}`);-1===p&&(p=f);var l=e.slice(u,p);a&&(l=l.replace(/\\/g,""),a=!1),r(i,o,l),44===d&&(r(t,s,i),i={},s=void 0),o=void 0,u=p=-1}else-1===p&&(p=f)}if(-1===u||h)throw new SyntaxError("Unexpected end of input");-1===p&&(p=f);const d=e.slice(u,p);return void 0===s?r(t,d,{}):(void 0===o?r(i,d,!0):r(i,o,a?d.replace(/\\/g,""):d),r(t,s,i)),t}}},function(e,t,s){"use strict";const n=s(44),r=s(52),o=s(59),i=s(75),a=s(47);class c extends n.Writable{constructor(e,t,s){super(),this._binaryType=e||a.BINARY_TYPES[0],this[a.kWebSocket]=void 0,this._extensions=t||{},this._maxPayload=0|s,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=!1,this._fin=!1,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._state=0,this._loop=!1}_write(e,t,s){if(8===this._opcode&&0==this._state)return s();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(s)}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){const t=this._buffers[0];return this._buffers[0]=t.slice(e),t.slice(0,e)}const t=Buffer.allocUnsafe(e);do{const s=this._buffers[0];e>=s.length?this._buffers.shift().copy(t,t.length-e):(s.copy(t,t.length-e,0,e),this._buffers[0]=s.slice(e)),e-=s.length}while(e>0);return t}startLoop(e){var t;this._loop=!0;do{switch(this._state){case 0:t=this.getInfo();break;case 1:t=this.getPayloadLength16();break;case 2:t=this.getPayloadLength64();break;case 3:this.getMask();break;case 4:t=this.getData(e);break;default:return void(this._loop=!1)}}while(this._loop);e(t)}getInfo(){if(this._bufferedBytes<2)return void(this._loop=!1);const e=this.consume(2);if(0!=(48&e[0]))return this._loop=!1,h(RangeError,"RSV2 and RSV3 must be clear",!0,1002);const t=64==(64&e[0]);if(t&&!this._extensions[r.extensionName])return this._loop=!1,h(RangeError,"RSV1 must be clear",!0,1002);if(this._fin=128==(128&e[0]),this._opcode=15&e[0],this._payloadLength=127&e[1],0===this._opcode){if(t)return this._loop=!1,h(RangeError,"RSV1 must be clear",!0,1002);if(!this._fragmented)return this._loop=!1,h(RangeError,"invalid opcode 0",!0,1002);this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return this._loop=!1,h(RangeError,`invalid opcode ${this._opcode}`,!0,1002);this._compressed=t}else{if(!(this._opcode>7&&this._opcode<11))return this._loop=!1,h(RangeError,`invalid opcode ${this._opcode}`,!0,1002);if(!this._fin)return this._loop=!1,h(RangeError,"FIN must be set",!0,1002);if(t)return this._loop=!1,h(RangeError,"RSV1 must be clear",!0,1002);if(this._payloadLength>125)return this._loop=!1,h(RangeError,`invalid payload length ${this._payloadLength}`,!0,1002)}if(this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&e[1]),126===this._payloadLength)this._state=1;else{if(127!==this._payloadLength)return this.haveLength();this._state=2}}getPayloadLength16(){if(!(this._bufferedBytes<2))return this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength();this._loop=!1}getPayloadLength64(){if(this._bufferedBytes<8)return void(this._loop=!1);const e=this.consume(8),t=e.readUInt32BE(0);return t>Math.pow(2,21)-1?(this._loop=!1,h(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",!1,1009)):(this._payloadLength=t*Math.pow(2,32)+e.readUInt32BE(4),this.haveLength())}haveLength(){if(this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0))return this._loop=!1,h(RangeError,"Max payload size exceeded",!1,1009);this._masked?this._state=3:this._state=4}getMask(){this._bufferedBytes<4?this._loop=!1:(this._mask=this.consume(4),this._state=4)}getData(e){var t=a.EMPTY_BUFFER;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength)return void(this._loop=!1);t=this.consume(this._payloadLength),this._masked&&o.unmask(t,this._mask)}return this._opcode>7?this.controlMessage(t):this._compressed?(this._state=5,void this.decompress(t,e)):(t.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(t)),this.dataMessage())}decompress(e,t){this._extensions[r.extensionName].decompress(e,this._fin,(e,s)=>{if(e)return t(e);if(s.length){if(this._messageLength+=s.length,this._messageLength>this._maxPayload&&this._maxPayload>0)return t(h(RangeError,"Max payload size exceeded",!1,1009));this._fragments.push(s)}const n=this.dataMessage();if(n)return t(n);this.startLoop(t)})}dataMessage(){if(this._fin){const t=this._messageLength,s=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){var e;e="nodebuffer"===this._binaryType?u(s,t):"arraybuffer"===this._binaryType?function(e){if(e.byteLength===e.buffer.byteLength)return e.buffer;return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}(u(s,t)):s,this.emit("message",e)}else{const e=u(s,t);if(!i.isValidUTF8(e))return this._loop=!1,h(Error,"invalid UTF-8 sequence",!0,1007);this.emit("message",e.toString())}}this._state=0}controlMessage(e){if(8===this._opcode)if(this._loop=!1,0===e.length)this.emit("conclude",1005,""),this.end();else{if(1===e.length)return h(RangeError,"invalid payload length 1",!0,1002);{const t=e.readUInt16BE(0);if(!i.isValidStatusCode(t))return h(RangeError,`invalid status code ${t}`,!0,1002);const s=e.slice(2);if(!i.isValidUTF8(s))return h(Error,"invalid UTF-8 sequence",!0,1007);this.emit("conclude",t,s.toString()),this.end()}}else 9===this._opcode?this.emit("ping",e):this.emit("pong",e);this._state=0}}function h(e,t,s,n){const r=new e(s?`Invalid WebSocket frame: ${t}`:t);return Error.captureStackTrace(r,h),r[a.kStatusCode]=n,r}function u(e,t){return 1===e.length?e[0]:e.length>1?o.concat(e,t):a.EMPTY_BUFFER}e.exports=c},function(e,t,s){"use strict";try{const e=s(!function(){var e=new Error("Cannot find module 'utf-8-validate'");throw e.code="MODULE_NOT_FOUND",e}());t.isValidUTF8="object"==typeof e?e.Validation.isValidUTF8:e}catch(e){t.isValidUTF8=()=>!0}t.isValidStatusCode=e=>e>=1e3&&e<=1013&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999},function(e,t,s){"use strict";const n=s(33),r=s(52),o=s(59),i=s(75),a=s(47);class c{constructor(e,t){this._extensions=t||{},this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(e,t){const s=e.length<1024||t.mask&&t.readOnly;var r=t.mask?6:2,i=e.length;e.length>=65536?(r+=8,i=127):e.length>125&&(r+=2,i=126);const a=Buffer.allocUnsafe(s?e.length+r:r);if(a[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(a[0]|=64),126===i?a.writeUInt16BE(e.length,2):127===i&&(a.writeUInt32BE(0,2),a.writeUInt32BE(e.length,6)),!t.mask)return a[1]=i,s?(e.copy(a,r),[a]):[a,e];const c=n.randomBytes(4);return a[1]=128|i,a[r-4]=c[0],a[r-3]=c[1],a[r-2]=c[2],a[r-1]=c[3],s?(o.mask(e,c,a,r,e.length),[a]):(o.mask(e,c,e,0,e.length),[a,e])}close(e,t,s,n){var r;if(void 0===e)r=a.EMPTY_BUFFER;else{if("number"!=typeof e||!i.isValidStatusCode(e))throw new TypeError("First argument must be a valid error code number");void 0===t||""===t?(r=Buffer.allocUnsafe(2)).writeUInt16BE(e,0):((r=Buffer.allocUnsafe(2+Buffer.byteLength(t))).writeUInt16BE(e,0),r.write(t,2))}this._deflating?this.enqueue([this.doClose,r,s,n]):this.doClose(r,s,n)}doClose(e,t,s){this.sendFrame(c.frame(e,{fin:!0,rsv1:!1,opcode:8,mask:t,readOnly:!1}),s)}ping(e,t,s){var n=!0;Buffer.isBuffer(e)||(e instanceof ArrayBuffer?e=Buffer.from(e):ArrayBuffer.isView(e)?e=h(e):(e=Buffer.from(e),n=!1)),this._deflating?this.enqueue([this.doPing,e,t,n,s]):this.doPing(e,t,n,s)}doPing(e,t,s,n){this.sendFrame(c.frame(e,{fin:!0,rsv1:!1,opcode:9,mask:t,readOnly:s}),n)}pong(e,t,s){var n=!0;Buffer.isBuffer(e)||(e instanceof ArrayBuffer?e=Buffer.from(e):ArrayBuffer.isView(e)?e=h(e):(e=Buffer.from(e),n=!1)),this._deflating?this.enqueue([this.doPong,e,t,n,s]):this.doPong(e,t,n,s)}doPong(e,t,s,n){this.sendFrame(c.frame(e,{fin:!0,rsv1:!1,opcode:10,mask:t,readOnly:s}),n)}send(e,t,s){var n=t.binary?2:1,o=t.compress,i=!0;Buffer.isBuffer(e)||(e instanceof ArrayBuffer?e=Buffer.from(e):ArrayBuffer.isView(e)?e=h(e):(e=Buffer.from(e),i=!1));const a=this._extensions[r.extensionName];if(this._firstFragment?(this._firstFragment=!1,o&&a&&(o=e.length>=a._threshold),this._compress=o):(o=!1,n=0),t.fin&&(this._firstFragment=!0),a){const r={fin:t.fin,rsv1:o,opcode:n,mask:t.mask,readOnly:i};this._deflating?this.enqueue([this.dispatch,e,this._compress,r,s]):this.dispatch(e,this._compress,r,s)}else this.sendFrame(c.frame(e,{fin:t.fin,rsv1:!1,opcode:n,mask:t.mask,readOnly:i}),s)}dispatch(e,t,s,n){if(!t)return void this.sendFrame(c.frame(e,s),n);const o=this._extensions[r.extensionName];this._deflating=!0,o.compress(e,s.fin,(e,t)=>{this._deflating=!1,s.readOnly=!1,this.sendFrame(c.frame(t,s),n),this.dequeue()})}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[1].length,e[0].apply(this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[1].length,this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.write(e[0]),this._socket.write(e[1],t)):this._socket.write(e[0],t)}}function h(e){const t=Buffer.from(e.buffer);return e.byteLength!==e.buffer.byteLength?t.slice(e.byteOffset,e.byteOffset+e.byteLength):t}e.exports=c},function(e,t){var s=[].indexOf;e.exports=function(e,t){if(s)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},function(e,t,s){var n=s(54),r=s(55),o=s(107),i=s(79),a=s(80),c=s(48)("socket.io-client:socket"),h=s(49),u=s(69);e.exports=l;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=r.prototype.emit;function l(e,t,s){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},s&&s.query&&(this.query=s.query),this.io.autoConnect&&this.open()}r(l.prototype),l.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[i(e,"open",a(this,"onopen")),i(e,"packet",a(this,"onpacket")),i(e,"close",a(this,"onclose"))]}},l.prototype.open=l.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},l.prototype.send=function(){var e=o(arguments);return e.unshift("message"),this.emit.apply(this,e),this},l.prototype.emit=function(e){if(p.hasOwnProperty(e))return f.apply(this,arguments),this;var t=o(arguments),s={type:(void 0!==this.flags.binary?this.flags.binary:u(t))?n.BINARY_EVENT:n.EVENT,data:t,options:{}};return s.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(c("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),s.id=this.ids++),this.connected?this.packet(s):this.sendBuffer.push(s),this.flags={},this},l.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},l.prototype.onopen=function(){if(c("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?h.encode(this.query):this.query;c("sending connect packet with query %s",e),this.packet({type:n.CONNECT,query:e})}else this.packet({type:n.CONNECT})},l.prototype.onclose=function(e){c("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},l.prototype.onpacket=function(e){var t=e.nsp===this.nsp,s=e.type===n.ERROR&&"/"===e.nsp;if(t||s)switch(e.type){case n.CONNECT:this.onconnect();break;case n.EVENT:case n.BINARY_EVENT:this.onevent(e);break;case n.ACK:case n.BINARY_ACK:this.onack(e);break;case n.DISCONNECT:this.ondisconnect();break;case n.ERROR:this.emit("error",e.data)}},l.prototype.onevent=function(e){var t=e.data||[];c("emitting event %j",t),null!=e.id&&(c("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?f.apply(this,t):this.receiveBuffer.push(t)},l.prototype.ack=function(e){var t=this,s=!1;return function(){if(!s){s=!0;var r=o(arguments);c("sending ack %j",r),t.packet({type:u(r)?n.BINARY_ACK:n.ACK,id:e,data:r})}}},l.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(c("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):c("bad ack %s",e.id)},l.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},l.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)f.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},l.prototype.ondisconnect=function(){c("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},l.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},l.prototype.close=l.prototype.disconnect=function(){return this.connected&&(c("performing disconnect (%s)",this.nsp),this.packet({type:n.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},l.prototype.compress=function(e){return this.flags.compress=e,this},l.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){e.exports=function(e,t,s){return e.on(t,s),{destroy:function(){e.removeListener(t,s)}}}},function(e,t){var s=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var n=s.call(arguments,2);return function(){return t.apply(e,n.concat(s.call(arguments)))}}},function(e,t,s){var n=s(61),r=s(48)("socket.io-client:url");e.exports=function(e,t){var s=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(r("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),r("parse %s",e),s=n(e));s.port||(/^(http|ws)$/.test(s.protocol)?s.port="80":/^(http|ws)s$/.test(s.protocol)&&(s.port="443"));s.path=s.path||"/";var o=-1!==s.host.indexOf(":")?"["+s.host+"]":s.host;return s.id=s.protocol+"://"+o+":"+s.port,s.href=s.protocol+"://"+o+(t&&t.port===s.port?"":":"+s.port),s}},function(e,t,s){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let n=0,r=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(n++,"%c"===e&&(r=n))}),t.splice(r,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=Object({NODE_ENV:"production"}).DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=s(62)(t);const{formatters:n}=e.exports;n.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var s=1e3,n=6e4,r=36e5,o=24*r;function i(e,t,s,n){var r=t>=1.5*s;return Math.round(e/s)+" "+n+(r?"s":"")}e.exports=function(e,t){t=t||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var i=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"weeks":case"week":case"w":return 6048e5*i;case"days":case"day":case"d":return i*o;case"hours":case"hour":case"hrs":case"hr":case"h":return i*r;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}(e);if("number"===a&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=o)return i(e,t,o,"day");if(t>=r)return i(e,t,r,"hour");if(t>=n)return i(e,t,n,"minute");if(t>=s)return i(e,t,s,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=o)return Math.round(e/o)+"d";if(t>=r)return Math.round(e/r)+"h";if(t>=n)return Math.round(e/n)+"m";if(t>=s)return Math.round(e/s)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,s){const n=s(30),r=s(31);t.init=function(e){e.inspectOpts={};const s=Object.keys(t.inspectOpts);for(let n=0;n<s.length;n++)e.inspectOpts[s[n]]=t.inspectOpts[s[n]]},t.log=function(...e){return process.stderr.write(r.format(...e)+"\n")},t.formatArgs=function(s){const{namespace:n,useColors:r}=this;if(r){const t=this.color,r="[3"+(t<8?t:"8;5;"+t),o=`  ${r};1m${n} [0m`;s[0]=o+s[0].split("\n").join("\n"+o),s.push(r+"m+"+e.exports.humanize(this.diff)+"[0m")}else s[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+n+" "+s[0]},t.save=function(e){e?Object({NODE_ENV:"production"}).DEBUG=e:delete Object({NODE_ENV:"production"}).DEBUG},t.load=function(){return Object({NODE_ENV:"production"}).DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):n.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=s(53);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(Object({NODE_ENV:"production"})).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const s=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let n=Object({NODE_ENV:"production"})[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[s]=n,e},{}),e.exports=s(62)(t);const{formatters:o}=e.exports;o.o=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts)}},function(e,t,s){"use strict";e.exports=(e,t)=>{t=t||process.argv;const s=e.startsWith("-")?"":1===e.length?"-":"--",n=t.indexOf(s+e),r=t.indexOf("--");return-1!==n&&(-1===r||n<r)}},function(e,t,s){"undefined"==typeof process||"renderer"===process.type?e.exports=s(87):e.exports=s(89)},function(e,t,s){function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=Object({NODE_ENV:"production"}).DEBUG),e}(t=e.exports=s(63)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var s=this.useColors;if(e[0]=(s?"%c":"")+this.namespace+(s?" %c":" ")+e[0]+(s?"%c ":" ")+"+"+t.humanize(this.diff),!s)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(r++,"%c"===e&&(o=r))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())},function(e,t){var s=1e3,n=6e4,r=36e5,o=24*r;function i(e,t,s){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+s:Math.ceil(e/t)+" "+s+"s"}e.exports=function(e,t){t=t||{};var a,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var i=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"days":case"day":case"d":return i*o;case"hours":case"hour":case"hrs":case"hr":case"h":return i*r;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?i(a=e,o,"day")||i(a,r,"hour")||i(a,n,"minute")||i(a,s,"second")||a+" ms":function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=r)return Math.round(e/r)+"h";if(e>=n)return Math.round(e/n)+"m";if(e>=s)return Math.round(e/s)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,s){var n=s(30),r=s(31);(t=e.exports=s(63)).init=function(e){e.inspectOpts={};for(var s=Object.keys(t.inspectOpts),n=0;n<s.length;n++)e.inspectOpts[s[n]]=t.inspectOpts[s[n]]},t.log=function(){return process.stderr.write(r.format.apply(r,arguments)+"\n")},t.formatArgs=function(e){var s=this.namespace;if(this.useColors){var n=this.color,r="[3"+(n<8?n:"8;5;"+n),o="  "+r+";1m"+s+" [0m";e[0]=o+e[0].split("\n").join("\n"+o),e.push(r+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(t.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+s+" "+e[0]},t.save=function(e){null==e?delete Object({NODE_ENV:"production"}).DEBUG:Object({NODE_ENV:"production"}).DEBUG=e},t.load=i,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):n.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{var o=s(53);o&&o.level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}function i(){return Object({NODE_ENV:"production"}).DEBUG}t.inspectOpts=Object.keys(Object({NODE_ENV:"production"})).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,t){var s=t.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,t){return t.toUpperCase()})),n=Object({NODE_ENV:"production"})[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[s]=n,e}),{}),t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts)},t.enable(i())},function(e,t,s){var n=s(64),r=s(65),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);t.deconstructPacket=function(e){var t=[],s=e.data,o=e;return o.data=function e(t,s){if(!t)return t;if(r(t)){var o={_placeholder:!0,num:s.length};return s.push(t),o}if(n(t)){for(var i=new Array(t.length),a=0;a<t.length;a++)i[a]=e(t[a],s);return i}if("object"==typeof t&&!(t instanceof Date)){i={};for(var c in t)i[c]=e(t[c],s);return i}return t}(s,t),o.attachments=t.length,{packet:o,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,s){if(!t)return t;if(t&&t._placeholder)return s[t.num];if(n(t))for(var r=0;r<t.length;r++)t[r]=e(t[r],s);else if("object"==typeof t)for(var o in t)t[o]=e(t[o],s);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var s=0,o=e;!function e(c,h,u){if(!c)return c;if(i&&c instanceof Blob||a&&c instanceof File){s++;var p=new FileReader;p.onload=function(){u?u[h]=this.result:o=this.result,--s||t(o)},p.readAsArrayBuffer(c)}else if(n(c))for(var f=0;f<c.length;f++)e(c[f],f,c);else if("object"==typeof c&&!r(c))for(var l in c)e(c[l],l,c)}(o),s||t(o)}},function(e,t,s){e.exports=s(92),e.exports.parser=s(46)},function(e,t,s){var n=s(67),r=s(58),o=s(51)("engine.io-client:socket"),i=s(77),a=s(46),c=s(61),h=s(49);function u(e,t){if(!(this instanceof u))return new u(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=c(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=c(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=h.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.withCredentials=!1!==t.withCredentials,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||null,this.key=t.key||null,this.passphrase=t.passphrase||null,this.cert=t.cert||null,this.ca=t.ca||null,this.ciphers=t.ciphers||null,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=u,u.priorWebsocketSuccess=!1,r(u.prototype),u.protocol=a.protocol,u.Socket=u,u.Transport=s(57),u.transports=s(67),u.parser=s(46),u.prototype.createTransport=function(e){o('creating transport "%s"',e);var t=function(e){var t={};for(var s in e)e.hasOwnProperty(s)&&(t[s]=e[s]);return t}(this.query);t.EIO=a.protocol,t.transport=e;var s=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new n[e]({query:t,socket:this,agent:s.agent||this.agent,hostname:s.hostname||this.hostname,port:s.port||this.port,secure:s.secure||this.secure,path:s.path||this.path,forceJSONP:s.forceJSONP||this.forceJSONP,jsonp:s.jsonp||this.jsonp,forceBase64:s.forceBase64||this.forceBase64,enablesXDR:s.enablesXDR||this.enablesXDR,withCredentials:s.withCredentials||this.withCredentials,timestampRequests:s.timestampRequests||this.timestampRequests,timestampParam:s.timestampParam||this.timestampParam,policyPort:s.policyPort||this.policyPort,pfx:s.pfx||this.pfx,key:s.key||this.key,passphrase:s.passphrase||this.passphrase,cert:s.cert||this.cert,ca:s.ca||this.ca,ciphers:s.ciphers||this.ciphers,rejectUnauthorized:s.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:s.perMessageDeflate||this.perMessageDeflate,extraHeaders:s.extraHeaders||this.extraHeaders,forceNode:s.forceNode||this.forceNode,localAddress:s.localAddress||this.localAddress,requestTimeout:s.requestTimeout||this.requestTimeout,protocols:s.protocols||void 0,isReactNative:this.isReactNative})},u.prototype.open=function(){var e;if(this.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},u.prototype.setTransport=function(e){o("setting transport %s",e.name);var t=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",(function(){t.onDrain()})).on("packet",(function(e){t.onPacket(e)})).on("error",(function(e){t.onError(e)})).on("close",(function(){t.onClose("transport close")}))},u.prototype.probe=function(e){o('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),s=!1,n=this;function r(){if(n.onlyBinaryUpgrades){var r=!this.supportsBinary&&n.transport.supportsBinary;s=s||r}s||(o('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(function(r){if(!s)if("pong"===r.type&&"probe"===r.data){if(o('probe transport "%s" pong',e),n.upgrading=!0,n.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,o('pausing current transport "%s"',n.transport.name),n.transport.pause((function(){s||"closed"!==n.readyState&&(o("changing transport and sending upgrade packet"),f(),n.setTransport(t),t.send([{type:"upgrade"}]),n.emit("upgrade",t),t=null,n.upgrading=!1,n.flush())}))}else{o('probe transport "%s" failed',e);var i=new Error("probe error");i.transport=t.name,n.emit("upgradeError",i)}})))}function i(){s||(s=!0,f(),t.close(),t=null)}function a(s){var r=new Error("probe error: "+s);r.transport=t.name,i(),o('probe transport "%s" failed because of error: %s',e,s),n.emit("upgradeError",r)}function c(){a("transport closed")}function h(){a("socket closed")}function p(e){t&&e.name!==t.name&&(o('"%s" works - aborting "%s"',e.name,t.name),i())}function f(){t.removeListener("open",r),t.removeListener("error",a),t.removeListener("close",c),n.removeListener("close",h),n.removeListener("upgrading",p)}u.priorWebsocketSuccess=!1,t.once("open",r),t.once("error",a),t.once("close",c),this.once("close",h),this.once("upgrading",p),t.open()},u.prototype.onOpen=function(){if(o("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){o("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},u.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else o('packet received with socket readyState "%s"',this.readyState)},u.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},u.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout((function(){"closed"!==t.readyState&&t.onClose("ping timeout")}),e||t.pingInterval+t.pingTimeout)},u.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout((function(){o("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)}),e.pingInterval)},u.prototype.ping=function(){var e=this;this.sendPacket("ping",(function(){e.emit("ping")}))},u.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},u.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},u.prototype.write=u.prototype.send=function(e,t,s){return this.sendPacket("message",e,t,s),this},u.prototype.sendPacket=function(e,t,s,n){if("function"==typeof t&&(n=t,t=void 0),"function"==typeof s&&(n=s,s=null),"closing"!==this.readyState&&"closed"!==this.readyState){(s=s||{}).compress=!1!==s.compress;var r={type:e,data:t,options:s};this.emit("packetCreate",r),this.writeBuffer.push(r),n&&this.once("flush",n),this.flush()}},u.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():t()})):this.upgrading?n():t()}function t(){e.onClose("forced close"),o("socket closing - telling transport to close"),e.transport.close()}function s(){e.removeListener("upgrade",s),e.removeListener("upgradeError",s),t()}function n(){e.once("upgrade",s),e.once("upgradeError",s)}return this},u.prototype.onError=function(e){o("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},u.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},u.prototype.filterUpgrades=function(e){for(var t=[],s=0,n=e.length;s<n;s++)~i(this.transports,e[s])&&t.push(e[s]);return t}},function(e,t,s){var n=s(56),r=s(68),o=s(58),i=s(50),a=s(51)("engine.io-client:polling-xhr");function c(){}function h(e){if(r.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,"undefined"!=typeof location){var t="https:"===location.protocol,s=location.port;s||(s=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||s!==e.port,this.xs=e.secure!==t}}function u(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}if(e.exports=h,e.exports.Request=u,i(h,r),h.prototype.supportsBinary=!0,h.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.withCredentials=this.withCredentials,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new u(e)},h.prototype.doWrite=function(e,t){var s="string"!=typeof e&&void 0!==e,n=this.request({method:"POST",data:e,isBinary:s}),r=this;n.on("success",t),n.on("error",(function(e){r.onError("xhr post error",e)})),this.sendXhr=n},h.prototype.doPoll=function(){a("xhr poll");var e=this.request(),t=this;e.on("data",(function(e){t.onData(e)})),e.on("error",(function(e){t.onError("xhr poll error",e)})),this.pollXhr=e},o(u.prototype),u.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new n(e),s=this;try{a("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var r in t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(r)&&t.setRequestHeader(r,this.extraHeaders[r])}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.withCredentials),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){s.onLoad()},t.onerror=function(){s.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{var e=t.getResponseHeader("Content-Type");(s.supportsBinary&&"application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?s.onLoad():setTimeout((function(){s.onError("number"==typeof t.status?t.status:0)}),0))},a("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((function(){s.onError(e)}),0)}"undefined"!=typeof document&&(this.index=u.requestsCount++,u.requests[this.index]=this)},u.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},u.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},u.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},u.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete u.requests[this.index],this.xhr=null}},u.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e=("application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},u.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},u.prototype.abort=function(){this.cleanup()},u.requestsCount=0,u.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){var p="onpagehide"in self?"pagehide":"unload";addEventListener(p,f,!1)}function f(){for(var e in u.requests)u.requests.hasOwnProperty(e)&&u.requests[e].abort()}},function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var s,n,r,o=String.fromCharCode;function i(e){for(var t,s,n=[],r=0,o=e.length;r<o;)(t=e.charCodeAt(r++))>=55296&&t<=56319&&r<o?56320==(64512&(s=e.charCodeAt(r++)))?n.push(((1023&t)<<10)+(1023&s)+65536):(n.push(t),r--):n.push(t);return n}function a(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(e,t){return o(e>>t&63|128)}function h(e,t){if(0==(4294967168&e))return o(e);var s="";return 0==(4294965248&e)?s=o(e>>6&31|192):0==(4294901760&e)?(a(e,t)||(e=65533),s=o(e>>12&15|224),s+=c(e,6)):0==(4292870144&e)&&(s=o(e>>18&7|240),s+=c(e,12),s+=c(e,6)),s+=o(63&e|128)}function u(){if(r>=n)throw Error("Invalid byte index");var e=255&s[r];if(r++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function p(e){var t,o;if(r>n)throw Error("Invalid byte index");if(r==n)return!1;if(t=255&s[r],r++,0==(128&t))return t;if(192==(224&t)){if((o=(31&t)<<6|u())>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&t)){if((o=(15&t)<<12|u()<<6|u())>=2048)return a(o,e)?o:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(o=(7&t)<<18|u()<<12|u()<<6|u())>=65536&&o<=1114111)return o;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var s=!1!==(t=t||{}).strict,n=i(e),r=n.length,o=-1,a="";++o<r;)a+=h(n[o],s);return a},decode:function(e,t){var a=!1!==(t=t||{}).strict;s=i(e),n=s.length,r=0;for(var c,h=[];!1!==(c=p(a));)h.push(c);return function(e){for(var t,s=e.length,n=-1,r="";++n<s;)(t=e[n])>65535&&(r+=o((t-=65536)>>>10&1023|55296),t=56320|1023&t),r+=o(t);return r}(h)}}},function(e,t){var s={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==s.call(e)}},function(e,t){function s(){}e.exports=function(e,t,n){var r=!1;return n=n||s,o.count=e,0===e?t():o;function o(e,s){if(o.count<=0)throw new Error("after called too many times");--o.count,e?(r=!0,t(e),t=n):0!==o.count||r||t(null,s)}}},function(e,t){e.exports=Object.keys||function(e){var t=[],s=Object.prototype.hasOwnProperty;for(var n in e)s.call(e,n)&&t.push(n);return t}},function(e,t,s){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let n=0,r=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(n++,"%c"===e&&(r=n))}),t.splice(r,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=Object({NODE_ENV:"production"}).DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=s(71)(t);const{formatters:n}=e.exports;n.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var s=1e3,n=6e4,r=36e5,o=24*r;function i(e,t,s,n){var r=t>=1.5*s;return Math.round(e/s)+" "+n+(r?"s":"")}e.exports=function(e,t){t=t||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var i=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"weeks":case"week":case"w":return 6048e5*i;case"days":case"day":case"d":return i*o;case"hours":case"hour":case"hrs":case"hr":case"h":return i*r;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}(e);if("number"===a&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=o)return i(e,t,o,"day");if(t>=r)return i(e,t,r,"hour");if(t>=n)return i(e,t,n,"minute");if(t>=s)return i(e,t,s,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=o)return Math.round(e/o)+"d";if(t>=r)return Math.round(e/r)+"h";if(t>=n)return Math.round(e/n)+"m";if(t>=s)return Math.round(e/s)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,s){const n=s(30),r=s(31);t.init=function(e){e.inspectOpts={};const s=Object.keys(t.inspectOpts);for(let n=0;n<s.length;n++)e.inspectOpts[s[n]]=t.inspectOpts[s[n]]},t.log=function(...e){return process.stderr.write(r.format(...e)+"\n")},t.formatArgs=function(s){const{namespace:n,useColors:r}=this;if(r){const t=this.color,r="[3"+(t<8?t:"8;5;"+t),o=`  ${r};1m${n} [0m`;s[0]=o+s[0].split("\n").join("\n"+o),s.push(r+"m+"+e.exports.humanize(this.diff)+"[0m")}else s[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+n+" "+s[0]},t.save=function(e){e?Object({NODE_ENV:"production"}).DEBUG=e:delete Object({NODE_ENV:"production"}).DEBUG},t.load=function(){return Object({NODE_ENV:"production"}).DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):n.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=s(53);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(Object({NODE_ENV:"production"})).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const s=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let n=Object({NODE_ENV:"production"})[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[s]=n,e},{}),e.exports=s(71)(t);const{formatters:o}=e.exports;o.o=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts)}},function(e,t,s){var n=s(68),r=s(50);e.exports=u;var o,i=/\n/g,a=/\\n/g;function c(){}function h(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}}function u(e){if(n.call(this,e),this.query=this.query||{},!o){var t=h();o=t.___eio=t.___eio||[]}this.index=o.length;var s=this;o.push((function(e){s.onData(e)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){s.script&&(s.script.onerror=c)}),!1)}r(u,n),u.prototype.supportsBinary=!1,u.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),n.prototype.doClose.call(this)},u.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var s=document.getElementsByTagName("script")[0];s?s.parentNode.insertBefore(t,s):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)},u.prototype.doWrite=function(e,t){var s=this;if(!this.form){var n,r=document.createElement("form"),o=document.createElement("textarea"),c=this.iframeId="eio_iframe_"+this.index;r.className="socketio",r.style.position="absolute",r.style.top="-1000px",r.style.left="-1000px",r.target=c,r.method="POST",r.setAttribute("accept-charset","utf-8"),o.name="d",r.appendChild(o),document.body.appendChild(r),this.form=r,this.area=o}function h(){u(),t()}function u(){if(s.iframe)try{s.form.removeChild(s.iframe)}catch(e){s.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+s.iframeId+'">';n=document.createElement(e)}catch(e){(n=document.createElement("iframe")).name=s.iframeId,n.src="javascript:0"}n.id=s.iframeId,s.form.appendChild(n),s.iframe=n}this.form.action=this.uri(),u(),e=e.replace(a,"\\\n"),this.area.value=e.replace(i,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===s.iframe.readyState&&h()}:this.iframe.onload=h}},function(e,t,s){var n,r,o=s(57),i=s(46),a=s(49),c=s(50),h=s(70),u=s(51)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{r=s(103)}catch(e){}var p=n||r;function f(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=n&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(p=r),o.call(this,e)}e.exports=f,c(f,o),f.prototype.name="websocket",f.prototype.supportsBinary=!0,f.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,s={agent:this.agent,perMessageDeflate:this.perMessageDeflate};s.pfx=this.pfx,s.key=this.key,s.passphrase=this.passphrase,s.cert=this.cert,s.ca=this.ca,s.ciphers=this.ciphers,s.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(s.headers=this.extraHeaders),this.localAddress&&(s.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?t?new p(e,t):new p(e):new p(e,t,s)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},f.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},f.prototype.write=function(e){var t=this;this.writable=!1;for(var s=e.length,n=0,r=s;n<r;n++)!function(e){i.encodePacket(e,t.supportsBinary,(function(n){if(!t.usingBrowserWebSocket){var r={};if(e.options&&(r.compress=e.options.compress),t.perMessageDeflate)("string"==typeof n?Buffer.byteLength(n):n.length)<t.perMessageDeflate.threshold&&(r.compress=!1)}try{t.usingBrowserWebSocket?t.ws.send(n):t.ws.send(n,r)}catch(e){u("websocket closed before onclose event")}--s||o()}))}(e[n]);function o(){t.emit("flush"),setTimeout((function(){t.writable=!0,t.emit("drain")}),0)}},f.prototype.onClose=function(){o.prototype.onClose.call(this)},f.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},f.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",s="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(s=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=h()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+s+this.path+e},f.prototype.check=function(){return!(!p||"__initialize"in p&&this.name===f.prototype.name)}},function(e,t,s){"use strict";const n=s(72);n.Server=s(106),n.Receiver=s(74),n.Sender=s(76),e.exports=n},function(e,t,s){"use strict";function n(e){if(!(this instanceof n))return new n(e);e=e||{},this.concurrency=e.concurrency||1/0,this.pending=0,this.jobs=[],this.cbs=[],this._done=r.bind(this)}function r(){this.pending--,this._run()}["push","unshift","splice"].forEach((function(e){n.prototype[e]=function(){var t=Array.prototype[e].apply(this.jobs,arguments);return this._run(),t}})),Object.defineProperty(n.prototype,"length",{get:function(){return this.pending+this.jobs.length}}),n.prototype._run=function(){if(this.pending!==this.concurrency){if(this.jobs.length){var e=this.jobs.shift();this.pending++,e(this._done),this._run()}if(0===this.pending)for(;0!==this.cbs.length;){var t=this.cbs.pop();process.nextTick(t)}}},n.prototype.onDone=function(e){"function"==typeof e&&(this.cbs.push(e),this._run())},e.exports=n},function(e,t,s){"use strict";class n{constructor(e,t){this.target=t,this.type=e}}class r extends n{constructor(e,t){super("message",t),this.data=e}}class o extends n{constructor(e,t,s){super("close",s),this.wasClean=s._closeFrameReceived&&s._closeFrameSent,this.reason=t,this.code=e}}class i extends n{constructor(e){super("open",e)}}class a extends n{constructor(e,t){super("error",t),this.message=e.message,this.error=e}}const c={addEventListener(e,t){function s(e){t.call(this,new r(e,this))}function n(e,s){t.call(this,new o(e,s,this))}function c(e){t.call(this,new a(e,this))}function h(){t.call(this,new i(this))}"function"==typeof t&&("message"===e?(s._listener=t,this.on(e,s)):"close"===e?(n._listener=t,this.on(e,n)):"error"===e?(c._listener=t,this.on(e,c)):"open"===e?(h._listener=t,this.on(e,h)):this.on(e,t))},removeEventListener(e,t){const s=this.listeners(e);for(var n=0;n<s.length;n++)s[n]!==t&&s[n]._listener!==t||this.removeListener(e,s[n])}};e.exports=c},function(e,t,s){"use strict";const n=s(37),r=s(33),o=s(32),i=s(52),a=s(73),c=s(47),h=s(72);function u(e){e.emit("close")}function p(){this.destroy()}function f(e,t,s,n){e.writable&&(s=s||o.STATUS_CODES[t],n=Object.assign({Connection:"close","Content-type":"text/html","Content-Length":Buffer.byteLength(s)},n),e.write(`HTTP/1.1 ${t} ${o.STATUS_CODES[t]}\r\n`+Object.keys(n).map(e=>`${e}: ${n[e]}`).join("\r\n")+"\r\n\r\n"+s)),e.removeListener("error",p),e.destroy()}e.exports=class extends n{constructor(e,t){if(super(),null==(e=Object.assign({maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null},e)).port&&!e.server&&!e.noServer)throw new TypeError('One of the "port", "server", or "noServer" options must be specified');null!=e.port?(this._server=o.createServer((e,t)=>{const s=o.STATUS_CODES[426];t.writeHead(426,{"Content-Length":s.length,"Content-Type":"text/plain"}),t.end(s)}),this._server.listen(e.port,e.host,e.backlog,t)):e.server&&(this._server=e.server),this._server&&(this._removeListeners=function(e,t){for(const s of Object.keys(t))e.on(s,t[s]);return function(){for(const s of Object.keys(t))e.removeListener(s,t[s])}}(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(e,t,s)=>{this.handleUpgrade(e,t,s,t=>{this.emit("connection",t,e)})}})),!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set),this.options=e}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(e&&this.once("close",e),this.clients)for(const e of this.clients)e.terminate();const t=this._server;t&&(this._removeListeners(),this._removeListeners=this._server=null,null!=this.options.port)?t.close(()=>this.emit("close")):process.nextTick(u,this)}shouldHandle(e){if(this.options.path){const t=e.url.indexOf("?");if((-1!==t?e.url.slice(0,t):e.url)!==this.options.path)return!1}return!0}handleUpgrade(e,t,s,n){t.on("error",p);const r=+e.headers["sec-websocket-version"],o={};if("GET"!==e.method||"websocket"!==e.headers.upgrade.toLowerCase()||!e.headers["sec-websocket-key"]||8!==r&&13!==r||!this.shouldHandle(e))return f(t,400);if(this.options.perMessageDeflate){const s=new i(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const t=a.parse(e.headers["sec-websocket-extensions"]);t[i.extensionName]&&(s.accept(t[i.extensionName]),o[i.extensionName]=s)}catch(e){return f(t,400)}}if(this.options.verifyClient){const i={origin:e.headers[`${8===r?"sec-websocket-origin":"origin"}`],secure:!(!e.connection.authorized&&!e.connection.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(i,(r,i,a,c)=>{if(!r)return f(t,i||401,a,c);this.completeUpgrade(o,e,t,s,n)});if(!this.options.verifyClient(i))return f(t,401)}this.completeUpgrade(o,e,t,s,n)}completeUpgrade(e,t,s,n,o){if(!s.readable||!s.writable)return s.destroy();const u=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${r.createHash("sha1").update(t.headers["sec-websocket-key"]+c.GUID,"binary").digest("base64")}`],f=new h(null);var l=t.headers["sec-websocket-protocol"];if(l&&(l=l.trim().split(/ *, */),(l=this.options.handleProtocols?this.options.handleProtocols(l,t):l[0])&&(u.push(`Sec-WebSocket-Protocol: ${l}`),f.protocol=l)),e[i.extensionName]){const t=e[i.extensionName].params,s=a.format({[i.extensionName]:[t]});u.push(`Sec-WebSocket-Extensions: ${s}`),f._extensions=e}this.emit("headers",u,t),s.write(u.concat("\r\n").join("\r\n")),s.removeListener("error",p),f.setSocket(s,n,this.options.maxPayload),this.clients&&(this.clients.add(f),f.on("close",()=>this.clients.delete(f))),o(f)}}},function(e,t){e.exports=function(e,t){for(var s=[],n=(t=t||0)||0;n<e.length;n++)s[n-t]=e[n];return s}},function(e,t){function s(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=s,s.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),s=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-s:e+s}return 0|Math.min(e,this.max)},s.prototype.reset=function(){this.attempts=0},s.prototype.setMin=function(e){this.ms=e},s.prototype.setMax=function(e){this.max=e},s.prototype.setJitter=function(e){this.jitter=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,